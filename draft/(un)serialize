#include "SeeDB.hpp"
template<typename T, typename A>
constexpr size_t size_of_attribute(A T::*attribute) {
    return sizeof(T::*attribute);
}

constexpr uint32_t ID_SIZE = size_of_attribute(&SRow::ID);
constexpr uint32_t NAME_SIZE = size_of_attribute(&SRow::Name);
constexpr uint32_t MAGNET_SIZE = size_of_attribute(&SRow::Magnet);
constexpr uint32_t ID_OFFSET = 0;
constexpr uint32_t NAME_OFFSET = ID_OFFSET + ID_SIZE;
constexpr uint32_t MAGNET_OFFSET = NAME_OFFSET + NAME_SIZE;
constexpr uint32_t ROW_SIZE = ID_SIZE + NAME_SIZE + MAGNET_SIZE;

void serialize_row(const SRow& source, void* destination) {
    std::memcpy(static_cast<char*>(destination) + ID_OFFSET, &source.ID, ID_SIZE);
    std::memcpy(static_cast<char*>(destination) + NAME_OFFSET, &source.Year, NAME_SIZE);
    std::memcpy(static_cast<char*>(destination) + MAGNET_OFFSET, &source.Language, MAGNET_SIZE);
}

void deserialize_row(const void* source, SRow& destination) {
    std::memcpy(&destination.id, static_cast<const char*>(source) + ID_OFFSET, ID_SIZE);
    std::memcpy(&destination.username, static_cast<const char*>(source) + NAME_OFFSET, NAME_SIZE);
    std::memcpy(&destination.email, static_cast<const char*>(source) + MAGNET_OFFSET, MAGNET_SIZE);
}
